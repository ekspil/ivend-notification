version: 2

jobs:
  build:
    docker:
      - image: circleci/node:11.1.0

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          - v1-dependencies-{{ checksum "package.json" }}-
          - v1-dependencies-

      - run: npm install
      - run: npm run lint

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}



  docker_push_tagged:
    docker:
      - image: docker:19.03.13-git

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker
      - deploy:
          name: Push application Docker image
          command: |
            echo ${YC_SERVICE_ACCOUNT} | docker login -u json_key --password-stdin cr.yandex
            docker build -t "cr.yandex/$YC_REGISTRY_ID/notification:$CIRCLE_TAG" .
            docker push "cr.yandex/$YC_REGISTRY_ID/notification:$CIRCLE_TAG"
  docker_push_develop:
    docker:
      - image: docker:19.03.13-git

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker
      - deploy:
          name: Push application Docker image
          command: |
            echo ${YC_SERVICE_ACCOUNT} | docker login -u json_key --password-stdin cr.yandex
            docker build -t "cr.yandex/$YC_REGISTRY_ID/notification:$CIRCLE_SHA1" .
            docker push "cr.yandex/$YC_REGISTRY_ID/notification:$CIRCLE_SHA1"

  deploy_develop:
    docker:
      - image: circleci/node:11.1.0

    working_directory: ~/repo

    steps:
      - run:
          name: Deploy
          command: |
            curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
            export PATH=$PATH:/home/circleci/yandex-cloud/bin/
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            echo $YC_SERVICE_ACCOUNT > /tmp/key.json
            yc config profile create sa-profile
            yc config set service-account-key /tmp/key.json
            yc managed-kubernetes cluster get-credentials --id $YC_K8S_CLUSTER_ID --external
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl set image deployment/notification notification=cr.yandex/$YC_REGISTRY_ID/notification:$CIRCLE_SHA1 --namespace development
  deploy_production:
    docker:
      - image: circleci/node:11.1.0

    working_directory: ~/repo

    steps:
      - run:
          name: Deploy
          command: |
            curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
            export PATH=$PATH:/home/circleci/yandex-cloud/bin/
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            echo $YC_SERVICE_ACCOUNT > /tmp/key.json
            yc config profile create sa-profile
            yc config set service-account-key /tmp/key.json
            yc managed-kubernetes cluster get-credentials --id $YC_K8S_CLUSTER_ID --external
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl apply -f production-kube-config.yml
workflows:
  version: 2
  notification_deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
                - develop
      - docker_push_tagged:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - docker_push_develop:
          filters:
            branches:
              only: develop
          requires:
            - build
      - deploy_develop:
          filters:
            branches:
              only:
                - develop
          requires:
            - build
            - docker_push_develop
      - deploy_production:
          filters:
            branches:
              only:
                - master
          requires:
            - build
